---
title: "Source-sink behavioural dynamics limit institutional evolution in a group structured society"
description: This model describes behaviors that require institutional strength to get off the ground. But as you add institutional levels to your collective, there is a cost. The model finds organizational free-riding, with some organizations preferring others to pay the cost of institutional strength while benefiting the behaviors emerging from those.
format:
  html:
    echo: false
editor: visual
categories:
  - Approximate Master Equations
  - Institutions
image: unions.jpg
---

```{ojs load results db}
resdb = DuckDBClient.of({
  sourcesink1: FileAttachment("sourcesink1.parquet"),
  sourcesink2: FileAttachment("sourcesink2.parquet"),
  sourcesink3: FileAttachment("sourcesink3.parquet")
})
```


::: {.column-screen-inset}


::: panel-tabset

## Source-sink model

#### Description

The key ingredients of the `source-sink model`[^1] are groups $G$ of various size with a certain number of adopters $i$ and of institution of level $\ell$. We assume that with higher levels of institutional strength, $\ell$, the institution will more effectively promote group-beneficial behavior, $\ell$$\beta$. As it gets better, each adopter in the group also gain a collective benefit [$b$]{style="color: seagreen;"}. But all of these toodily-doo perks are offset by an institutional implementation costs, [$c$]{style="color: darkred;"}, of entertaining larger groups. For instance, think of the process of unionization, promoting behaviors that are costly at individual level. When unionization becomes more successful, the unions can become ungaingly. Lastly adopters lose their behavioural trait at a rate [$\gamma$]{style="color: red;"}.

[^1]: 
@article{hebert-dufresne_source-sink_nodate,
	title = {Source-sink behavioural dynamics limit institutional evolution in a group-structured society},
	volume = {9},
	url = {https://royalsocietypublishing.org/doi/full/10.1098/rsos.211743},
	doi = {10.1098/rsos.211743},
	number = {3},
	urldate = {2022-05-26},
	journal = {Royal Society Open Science},
	author = {Hébert-Dufresne, Laurent and Waring, Timothy M. and St-Onge, Guillaume and Niles, Meredith T. and Kati Corlew, Laura and Dube, Matthew P. and Miller, Stephanie J. and Gotelli, Nicholas J. and McGill, Brian J.}},
}


First master equation[^2]:

[^2]: A sidenote on master equations for non-physicists. The citation for master equations in the original paper is the following:

    > Hébert-Dufresne, L., Noël, P.-A., Marceau, V., Allard, A., & Dubé, L. J. (2010). Propagation dynamics on networks featuring complex topologies. Physical Review E, 82(3), 036115. https://doi.org/10.1103/PhysRevE.82.036115

    The term ''master equation'' is not mentionned once in the paper. But they do talk about "*a mean-field description used to coherently couple the dynamics of the network elements (nodes, vertices, individuals...) and their recurrent topological patterns (subgraphs, groups...)*" that yields a set of ODEs for the time evolution of the system. Another paper writen by Guillaume St-Onge et al. is a more generous in their description of master equation:

    > St-Onge, G., Thibeault, V., Allard, A., Dubé, L. J., & Hébert-Dufresne, L. (2021). Master equation analysis of mesoscopic localization in contagion dynamics on higher-order networks. Physical Review E, 103(3), 032301. https://doi.org/10.1103/PhysRevE.103.032301

    In it, section II does a great job of describing what master equations are and why they are powerful modeling tools. Relevant to this model, we learn that the size of a group is determined by drawing from a group size distribution. This is what we do in our intialization scheme above. We also learn that these 3 following papers are relevant to understand master equations:

    > Lindquist, J., Ma, J., van den Driessche, P., & Willeboordse, F. H. (2011). Effective degree network disease models. Journal of Mathematical Biology, 62(2), 143--164. https://doi.org/10.1007/s00285-010-0331-2 <br><br> Gleeson, J. P. (2011). High-Accuracy Approximation of Binary-State Dynamics on Networks. Physical Review Letters, 107(6), 068701. https://doi.org/10.1103/PhysRevLett.107.068701 <br><br> Marceau, V., Noël, P.-A., Hébert-Dufresne, L., Allard, A., & Dubé, L. J. (2010). Adaptive networks: Coevolution of disease and topology. Physical Review E, 82(3), 036116. https://doi.org/10.1103/PhysRevE.82.036116

```{=tex}
\begin{align*}
\frac{d}{dt}G_{i,\ell}^{diff} &= \ell \mathbin{\color{darkgreen}{\beta}} [(i-1) + R](n - i + 1)G_{i-1,\ell} \\
                              &- \ell\mathbin{\color{darkgreen}{\beta}} (i+R)(n-i) G_{i,\ell} \\
                              &+ \mathbin{\color{red}{\gamma}}(i+1)G_{i+1,\ell} - \mathbin{\color{red}{\gamma}} i G_{i,\ell}
\end{align*}
```
where $R = \mathbin{\color{blue}{\rho}} \sum_{i',\ell'} i'G_{i',\ell'}$ represents the global diffusion of behaviors and primes denote variable over which we sum to calculate global quantity. The sum over adopters at each level weighted by global behavioural diffusion [$\rho$]{style="color: blue;"}.

Second master equation:

```{=tex}
\begin{align*}
\frac{d}{dt}G_{i,\ell}^{select} &= \mathbin{\color{blue}{\rho}} [G_{i,\ell-1}(Z_\ell Z_{\ell-1}^{-1} + \mathbin{\color{midnightblue}{\mu}}) + G_{i,\ell+1}(Z\ell Z_{\ell + 1}^{-1} + \mathbin{\color{midnightblue}{\mu}})] \\
                                &-\mathbin{\color{blue}{\rho}}(Z_{\ell-1}Z_\ell^{-1} + Z_{\ell+1}^{-1} + 2\mathbin{\color{midnightblue}{\mu}})G_{i,\ell}
\end{align*}
```
where $Z_\ell = \frac{\sum_{i'} exp(\mathbin{\color{seagreen}{b}}i'- \mathbin{\color{darkred}{c}}\ell)G_{i',\ell}}{\sum_{i'}G_{i',\ell}}$. Note that we add a constant rate of transition [$\mu$]{style="color: midnightblue;"} to the selection proces.

Taken together we have the set of master equations:

$$
\frac{d}{dt}G_{i,\ell} = \frac{d}{dt}G_{i,\ell}^{diff} + \frac{d}{dt}G_{i,\ell}^{select}
$$

#### Julia model

``` julia
function source_sink!(du, u, p, t)
    G, L, n = u, length(u.x), length(first(u.x))
    β, γ, ρ, b, c, μ = p
    Z, pop, R = zeros(L), zeros(L), 0.

    # Calculate mean-field coupling and observed fitness landscape
    for ℓ in 1:L
      n_adopt = collect(0:(n-1))
      Z[ℓ]    = sum(exp.(b*n_adopt .- c*(ℓ-1)) .* G.x[ℓ])
      pop[ℓ]  = sum(G.x[ℓ])
      R       += sum(ρ*n_adopt .* G.x[ℓ])
      pop[ℓ] > 0.0 && ( Z[ℓ] /= pop[ℓ] )
    end

    for ℓ = 1:L, i = 1:n
      n_adopt, gr_size = i-1, n-1

      # Diffusion events
      du.x[ℓ][i] = -γ*n_adopt*G.x[ℓ][i] - (ℓ-1)*β*(n_adopt+R)*(gr_size-n_adopt)*G.x[ℓ][i]

      n_adopt > 0 && ( du.x[ℓ][i] += β*(ℓ-1)*(n_adopt-1+R)*(gr_size-n_adopt+1)*G.x[ℓ][i-1])
      n_adopt < gr_size && ( du.x[ℓ][i] +=  γ*(n_adopt+1)*G.x[ℓ][i+1] )

      # Group selection process
      ℓ > 1 && ( du.x[ℓ][i] += ρ*G.x[ℓ-1][i]*(Z[ℓ] / Z[ℓ-1] + μ) - ρ*G.x[ℓ][i]*(Z[ℓ-1] / Z[ℓ]+μ) )
      ℓ < L && ( du.x[ℓ][i] += ρ*G.x[ℓ+1][i]*(Z[ℓ] / Z[ℓ+1] + μ) - ρ*G.x[ℓ][i]*(Z[ℓ+1] / Z[ℓ]+μ) )
    end
end
```
#### Analysis

```{ojs}
//| panel: sidebar

sourcesink1 = resdb.query(`SELECT DISTINCT name FROM sourcesink1`)
lookup1 = {
  const out = {}
  out['idx2name'] = {0: "β", 1: 'γ', 2: 'ρ', 3: 'b', 4: 'c', 5: 'μ'}
  out['name2idx'] = {"β": 0, 'γ': 1, 'ρ': 2, 'b': 3, 'c': 4, 'μ': 5}
  return out
}

p1 = get_param_table(sourcesink1, lookup1)

viewof s1 = Inputs.form({
  β: Inputs.range(p1['β']['minmax'], {step: p1['β']['s'], label: "β"}),
  γ: Inputs.range(p1['γ']['minmax'], {step: p1['γ']['s'], label: "γ"}),
  ρ: Inputs.range(p1['ρ']['minmax'], {step: p1['ρ']['s'], label: "ρ"}),
  b: Inputs.range(p1['b']['minmax'], {step: p1['b']['s'], label: "b"}),
  c: Inputs.range(p1['c']['minmax'], {step: p1['c']['s'], label: "c"}),
  μ: Inputs.range(p1['μ']['minmax'], {step: p1['μ']['s'], label: "μ"})
})

data = resdb.query(`
  SELECT timestep::INT as timestep, L::INT as L, value, name
  FROM sourcesink1
  WHERE
  name = '${f(s1['β'])}_${f(s1['γ'])}_${f(s1['ρ'])}_${f(s1['b'])}_${f(s1['c'])}_${f(s1['μ'])}'
`)
```

```{ojs}
//| panel: fill
plot_time_evo(data)
```

#### Takeaways:

-   Frequency of behaviour in groups with different institutional strength.
-   Within groups, the frequency of cooperative behaviour follows the strength of institutions (with ℓ = 1 in light beige and ℓ = 6 in dark red).
-   Qualitatively, no institutions are possible if institutional costs are too high, and the behaviour never spreads.
-   The time dynamics of global behavioural frequency and behaviour in groups can include patterns of surge and collapse.

## Contagion model

#### Description

The key difference in that model from the last is that contagion is something to be limited by institutions of various levels. As such, $\beta$ in our model now must be negative while $\alpha$ must be positive for transmission to fall with $\ell$.

We ask ourselves to what extent the contagion is able to spread with very little $\beta$ values.

We want institutions to be able to stop contagions but contagion must exist in the first place.

```{=tex}
\begin{align*}
\frac{d}{dt}G_{i,\ell}^{\text{epi}} &= \beta {\color{red}{\ell}}^{\color{red}{-\alpha}} [(i-1) + R](n - i + 1)G_{i-1,\ell} \\
                              &- \beta {\color{red}{\ell}}^{\color{red}{-\alpha}} (i+R)(n-i) G_{i,\ell} \\
                              &+ \gamma(i+1)G_{i+1,\ell} - \mathbin{\gamma} i G_{i,\ell}
\end{align*}
```
where $R = \mathbin{\rho} \sum_{i',\ell'} i'G_{i',\ell'}$ represents the global diffusion of behaviors and primes denote variable over which we sum to calculate global quantity. The sum over adopters at each level weighted by global behavioural diffusion $\rho$.

``` julia
function source_sink2!(du, u, p, t)
    G, L, n = u, length(u.x), length(first(u.x))
    β, α, γ, ρ, b, c, μ = p
    Z, pop, R = zeros(L), zeros(L), 0.

    # Calculate mean-field coupling and observed fitness landscape
    for ℓ in 1:L
        n_adopt = collect(0:(n-1))
        Z[ℓ]    = sum(exp.(b*n_adopt .- c*(ℓ-1)) .* G.x[ℓ]) 
        pop[ℓ]  = sum(G.x[ℓ])
        R      += sum(ρ * n_adopt .* G.x[ℓ]) 
        pop[ℓ] > 0.0 && ( Z[ℓ] /= pop[ℓ] ) 
      end
      
      for ℓ = 1:L, i = 1:n
        n_adopt, gr_size = i-1, n-1
        # Diffusion events
        du.x[ℓ][i] = -γ*n_adopt*G.x[ℓ][i] - β*(ℓ^-α)*(n_adopt+R)*(gr_size-n_adopt)*G.x[ℓ][i]
        n_adopt > 0 && ( du.x[ℓ][i] += β*(ℓ^-α)*(n_adopt-1+R)*(gr_size-n_adopt+1)*G.x[ℓ][i-1])
        n_adopt < gr_size && ( du.x[ℓ][i] +=  γ*(n_adopt+1)*G.x[ℓ][i+1] )
        # Group selection process
        ℓ > 1 && ( du.x[ℓ][i] += ρ*G.x[ℓ-1][i]*(Z[ℓ] / Z[ℓ-1] + μ) - ρ*G.x[ℓ][i]*(Z[ℓ-1] / Z[ℓ]+μ) )
        ℓ < L && ( du.x[ℓ][i] += ρ*G.x[ℓ+1][i]*(Z[ℓ] / Z[ℓ+1] + μ) - ρ*G.x[ℓ][i]*(Z[ℓ+1] / Z[ℓ]+μ) )
      end
end
```
#### Plot

::: panel-tabset

## Time evo plot

```{ojs}
//| panel: sidebar
sourcesink2 = resdb.query(`SELECT DISTINCT name FROM sourcesink2`)
lookup2 = {
  const out = {}
  out['idx2name'] = {0: 'β', 1: 'ξ', 2: 'α', 3: 'γ', 4: 'ρ', 5: 'η', 6: 'b', 7: 'c', 8:'μ'}
  out['name2idx'] = {'β': 0, 'ξ': 1, 'α': 2, 'γ': 3, 'ρ': 4, 'η': 5, 'b': 6, 'c': 7, 'μ': 8}
  return out
}

p2 = get_param_table(sourcesink2, lookup2)

viewof s2 = Inputs.form({
  β: Inputs.range(p2['β']['minmax'], {step: p2['β']['s'], label: "β", value: p2['β']['first_val']}),
  ξ: Inputs.range(p2['ξ']['minmax'], {step: p2['ξ']['s'], label: "ξ", value: p2['ξ']['first_val']}),
  α: Inputs.range(p2['α']['minmax'], {step: p2['α']['s'], label: "α", value: p2['α']['first_val']}),
  γ: Inputs.range(p2['γ']['minmax'], {step: p2['γ']['s'], label: "γ", value: p2['γ']['first_val']}),
  ρ: Inputs.range(p2['ρ']['minmax'], {step: p2['ρ']['s'], label: "ρ", value: p2['ρ']['first_val']}),
  η: Inputs.range(p2['η']['minmax'], {step: p2['η']['s'], label: "η", value: p2['η']['first_val']}),
  b: Inputs.range(p2['b']['minmax'], {step: p2['b']['s'], label: "b", value: p2['b']['first_val']}),
  c: Inputs.range(p2['c']['minmax'], {step: p2['c']['s'], label: "c", value: p2['c']['first_val']}),
  μ: Inputs.range(p2['μ']['minmax'], {step: p2['μ']['s'], label: "μ", value: p2['μ']['first_val']})
})

data2 = resdb.query(`
  SELECT timestep::INT as timestep, L::INT as L, value, name
  FROM sourcesink2
  WHERE
  name = '${f(s2['β'])}_${f(s2['ξ'])}_${f(s2['α'])}_${f(s2['γ'])}_${f(s2['ρ'])}_${f(s2['η'])}_${f(s2['b'])}_${f(s2['c'])}_${f(s2['μ'])}'
`)
```

```{ojs}
//| panel: fill
plot_time_evo(data2)
```

## Phase diagram

```{ojs}
//| panel: sidebar
ax_vars2 = ["β", "ρ", "η"] // choose the x,y,z axis, i.e. params to vary
facet_var2 = ["α"]  // choose the facet variable
fp2 = get_fixed_params(p2, ax_vars2, facet_var2); // fixed params are the rest

viewof r2 = Inputs.form({
  x: Inputs.radio(ax_vars2, {label: "x", value: ax_vars2[0]}),
  y: Inputs.radio(ax_vars2, {label: "y", value: ax_vars2[1]})
})

viewof s2b = Inputs.form({
  ax0: Inputs.range(p2[ax_vars2[0]]['minmax'], {step: p2[ax_vars2[0]]['s'], label: ax_vars2[0], disabled: r2['x'] == ax_vars2[0] || r2['y'] == ax_vars2[0]}),
  ax1: Inputs.range(p2[ax_vars2[1]]['minmax'], {step: p2[ax_vars2[1]]['s'], label: ax_vars2[1], disabled: r2['x'] == ax_vars2[1] || r2['y'] == ax_vars2[1]}),
  ax2: Inputs.range(p2[ax_vars2[2]]['minmax'], {step: p2[ax_vars2[2]]['s'], label: ax_vars2[2], disabled: r2['x'] == ax_vars2[2] || r2['y'] == ax_vars2[2]}),
  fp0: Inputs.range(p2[fp2[0]]['minmax'], {step: p2[fp2[0]]['s'], label: fp2[0], value: p2[fp2[0]]['first_val']}),
  fp1: Inputs.range(p2[fp2[1]]['minmax'], {step: p2[fp2[1]]['s'], label: fp2[1], value: p2[fp2[1]]['first_val']}),
  fp2: Inputs.range(p2[fp2[2]]['minmax'], {step: p2[fp2[2]]['s'], label: fp2[2], value: p2[fp2[2]]['first_val']}),
  fp3: Inputs.range(p2[fp2[3]]['minmax'], {step: p2[fp2[3]]['s'], label: fp2[3], value: p2[fp2[3]]['first_val']}),
  fp4: Inputs.range(p2[fp2[4]]['minmax'], {step: p2[fp2[4]]['s'], label: fp2[4], value: p2[fp2[4]]['first_val']})
})
```

```{ojs}
//| panel: fill
data2b = resdb.query(`
    WITH tmp as (
        SELECT name, L, MAX(timestep::INT) as timestep
        FROM sourcesink2
        GROUP BY name, L
    )
    SELECT s.name, s.value, s.L::INT as L, s.value_prop
    FROM sourcesink2 s
    JOIN tmp
    ON s.name = tmp.name AND s.L = tmp.L AND s.timestep = tmp.timestep 
`)

data_hm2 = get_data_heatmap(data2b, lookup2, facet_var2, fp2, ax_vars2, r2, s2b)

phase_diagram(data_hm2, r2['x'], r2['y'])
```

:::

## Game-theoretic model

#### Description

The key difference in that model from the last is that contagion is something to be limited by institutions of various levels. As such, $\beta$ in our model now must be negative while $\alpha$ must be positive for transmission to fall with $\ell$.

We ask ourselves to what extent the contagion is able to spread with very little $\beta$ values.

We want institutions to be able to stop contagions but contagion must exist in the first place.

```julia
function source_sink3!(du, u, p, t)
  G, L, n = u, length(u.x), length(u.x[1])
  β, γ, ρ, b, c, μ = p
  Z, pop, R = zeros(L), zeros(L), 0.

  # Calculate mean-field coupling and observed fitness landscape
  # In the following, the functions g (cost-benefits for groups) and g̃ (fitness function) are taken equal to function f. The three have similar properties.
    for ℓ in 1:L
      n_adopt = collect(0:(n-1))
      Z[ℓ]    = sum(f.(b*n_adopt .- c*(ℓ-1)) .* G.x[ℓ])
      pop[ℓ]  = sum(G.x[ℓ])
      R      += sum(n_adopt .* G.x[ℓ]) # Global diffusion
      pop[ℓ] > 0.0 && ( Z[ℓ] /= pop[ℓ] )
  end

    for ℓ = 1:L, i = 1:n
      n_adopt, gr_size = i-1, n-1
      # Inndividual selection process
      du.x[ℓ][i] = -n_adopt*f(1-h(ℓ))*G.x[ℓ][i] - (gr_size-n_adopt)*f(h(ℓ)-1)*G.x[ℓ][i]
      du.x[ℓ][i] += -n_adopt*(gr_size-n_adopt)*(β+γ)*G.x[ℓ][i] - ρ*(gr_size-n_adopt)*β*R*G.x[ℓ][i] - ρ*n_adopt*γ*(gr_size-R)*G.x[ℓ][i]
      n_adopt > 0 && ( du.x[ℓ][i] += (gr_size-n_adopt+1)*f(h(ℓ)-1)*G.x[ℓ][i-1] + β*(n_adopt-1+ρ*R)*(gr_size-n_adopt+1)*G.x[ℓ][i-1] )
      n_adopt < gr_size && ( du.x[ℓ][i] += (n_adopt+1)*f(1-h(ℓ))*G.x[ℓ][i+1] + γ*(gr_size-n_adopt-1+ρ*(gr_size-R))*(n_adopt+1)*G.x[ℓ][i+1] )
      # Group selection process
      ℓ > 1 && ( du.x[ℓ][i] += f(b*n_adopt-c*(ℓ-1))*(μ+ρ*Z[ℓ]/Z[ℓ-1])*G.x[ℓ-1][i] - (μ*f(c*(ℓ-1)-b*n_adopt)+ρ*f(b*n_adopt-c*(ℓ-2))*Z[ℓ-1]/Z[ℓ])*G.x[ℓ][i] )
      ℓ < L && ( du.x[ℓ][i] += (μ*f(c*ℓ-b*n_adopt)+ρ*f(b*n_adopt-c*(ℓ-1))*Z[ℓ]/Z[ℓ+1])*G.x[ℓ+1][i] - f(b*n_adopt-c*ℓ)*(μ+ρ*Z[ℓ+1]/Z[ℓ])*G.x[ℓ][i] )
    end
end
```

::: panel-tabset

## Time evo plot

```{ojs}
//| panel: sidebar
sourcesink3 = resdb.query(`SELECT DISTINCT name FROM sourcesink3`)
lookup3 = {
  const out = {}
  out['idx2name'] = {0: "β", 1: 'γ', 2: 'ρ', 3: 'b', 4: 'c', 5: 'μ', 6: 'δ'}
  out['name2idx'] = {"β": 0, 'γ':1, 'ρ': 2, 'b': 3, 'c': 4, 'μ': 5, 'δ': 6}
  return out
}

p3 = get_param_table(sourcesink3, lookup3)

viewof s3 = Inputs.form({
  β: Inputs.range(p3['β']['minmax'], {step: p3['β']['s'], label: "β"}),
  γ: Inputs.range(p3['γ']['minmax'], {step: p3['γ']['s'], label: "γ"}),
  ρ: Inputs.range(p3['ρ']['minmax'], {step: p3['ρ']['s'], label: "ρ"}),
  b: Inputs.range(p3['b']['minmax'], {step: p3['b']['s'], label: "b"}),
  c: Inputs.range(p3['c']['minmax'], {step: p3['c']['s'], label: "c"}),
  μ: Inputs.range(p3['μ']['minmax'], {step: p3['μ']['s'], label: "μ"}),
  δ: Inputs.range(p3['δ']['minmax'], {step: p3['δ']['s'], label: "δ"})
})

data3a = resdb.query(`
  SELECT timestep::INT as timestep, L::INT as L, value, name
  FROM sourcesink3
  WHERE
  name = '${f(s3['β'])}_${f(s3['γ'])}_${f(s3['ρ'])}_${f(s3['b'])}_${f(s3['c'])}_${f(s3['μ'])}_${f(s3['δ'])}'
`)
```

```{ojs}
//| panel: fill
plot_time_evo(data3a)
```

## Phase diagram

```{ojs}
//| panel: sidebar
ax_vars3 = ["β", "ρ", 'b']
facet_var3 = ["δ"]
fp3 = get_fixed_params(p3, ax_vars3, facet_var3);

viewof r3 = Inputs.form({
  x: Inputs.radio(ax_vars3, {label: "x", value: ax_vars3[0]}),
  y: Inputs.radio(ax_vars3, {label: "y", value: ax_vars3[1]})
})

viewof s3b = Inputs.form({
  ax0: Inputs.range(p3[ax_vars3[0]]['minmax'], {step: p3[ax_vars3[0]]['s'], label: ax_vars3[0], disabled: r3['x'] == ax_vars3[0] || r3['y'] == ax_vars3[0]}),
  ax1: Inputs.range(p3[ax_vars3[1]]['minmax'], {step: p3[ax_vars3[1]]['s'], label: ax_vars3[1], disabled: r3['x'] == ax_vars3[1] || r3['y'] == ax_vars3[1]}),
  ax2: Inputs.range(p3[ax_vars3[2]]['minmax'], {step: p3[ax_vars3[2]]['s'], label: ax_vars3[2], disabled: r3['x'] == ax_vars3[2] || r3['y'] == ax_vars3[2]}),
  fp0: Inputs.range(p3[fp3[0]]['minmax'], {step: p3[fp3[0]]['s'], label: fp3[0], value: p3[fp3[0]]['first_val']}),
  fp1: Inputs.range(p3[fp3[1]]['minmax'], {step: p3[fp3[1]]['s'], label: fp3[1], value: p3[fp3[1]]['first_val']}),
  fp2: Inputs.range(p3[fp3[2]]['minmax'], {step: p3[fp3[2]]['s'], label: fp3[2], value: p3[fp3[2]]['first_val']})
})
```

```{ojs}
//| panel: fill
data3b = resdb.query(`
    WITH tmp as (
        SELECT name, L, MAX(timestep::INT) as timestep
        FROM sourcesink3
        GROUP BY name, L
    )
    SELECT s.name, s.value, s.L::INT as L, s.value_prop
    FROM sourcesink3 s
    JOIN tmp
    ON s.name = tmp.name AND s.L = tmp.L AND s.timestep = tmp.timestep 
`)

data_hm3 = get_data_heatmap(data3b, lookup3, facet_var3, fp3, ax_vars3, r3, s3b)

phase_diagram(data_hm3, r3['x'], r3['y'])
```


```{ojs helpers}
function get_fixed_params(param_table, ax_vars, fx) {
  const all_params = [...Object.keys(param_table)]
  const varying_params = new Set(ax_vars.concat(fx))
  const diff_params = new Set(all_params.filter((x) => !varying_params.has(x)))
  return Array.from(diff_params)
}

f = (x) => Number.isInteger(x) ? x.toPrecision(2) : x

// Param table where each key is a parameter, and values 
// are list of values relevant to 
// model: resdb output for a specific model
// lookup: { [0: param1, 1: param2, ...] }
function get_param_table(model, lookup) {
  
  // Extract the step from a list of values for a parameter
  const s = (p,i) => { 
    const unique_vals = Array.from(new Set(p.map(d => parseFloat(d[i]))))
                            .sort((a,b) => a - b)
    const out = []
    for (let i=1; i < unique_vals.length; i++ ) {
      out.push(+(unique_vals[i]-unique_vals[i-1]).toPrecision(2))
    } // return whatev if length is zero
    return out.length === 0 ? 0.1 : out[0]
  }

  const minmax = (p, i) => d3.extent(p.map(d => parseFloat(d[i])))
  
  const p = model.map(d => d.name.split("_"))
  
  const param_table = {}
  const first_line_param = p[0]
  for ( let i=0; i < first_line_param.length; i++ ) {
    param_table[lookup['idx2name'][i]] = { 's': s(p,i), 'first_val': first_line_param[i], 'minmax': minmax(p,i) }
  }
  return param_table
}

// To get heatmap data, we need
//   data: data from resdb join `name` and `L`
//   ax_vars: variables we want as x,y,z
//   fx: variable to facet
//   fp: other vars
//   sliders: set of sliders
function get_data_heatmap(data, lookup, fx, fp, ax_vars, radios, sliders) {
  const dat_hm = [];
  
  for (let i=0; i < data.length; i++) { 
    
    const p_split = data[i].name.split('_')
    
    const vs = {} // dictionary containing all the values of selected parameters 

    const [ax0, ax1, ax2] = ax_vars
    vs[ax0] = parseFloat(p_split[lookup['name2idx'][ax0]])
    vs[ax1] = parseFloat(p_split[lookup['name2idx'][ax1]])
    vs[ax2] = parseFloat(p_split[lookup['name2idx'][ax2]])

    for (let i=0; i < fp.length; i++) {
      vs[fp[i]] = parseFloat(p_split[lookup['name2idx'][fp[i]]])
    }
    
    const hm_vals_i = {
      'L': data[i].L,
      'fx' : p_split[lookup['name2idx'][fx]], 
      'param1': parseFloat(p_split[lookup['name2idx'][radios['x']]]),
      'param2': parseFloat(p_split[lookup['name2idx'][radios['y']]]),
      'value': data[i].value_prop
    }

    if (vs[fp[0]] === sliders['fp0'] && vs[fp[1]] === sliders['fp1'] && vs[fp[2]] === sliders['fp2'] && vs[fp[3]] == sliders['fp3'] && vs[fp[4]] == sliders['fp4']) {

        // if ax1 == x && ax2 ==y, then ax0 == z
        if (radios['x'] == ax1 && radios['y'] == ax2 && vs[ax0] == sliders['ax0']) {
             dat_hm.push(hm_vals_i)
        } else if (radios['x'] == ax0 && radios['y'] == ax2 && vs[ax1] == sliders['ax1']) {
             dat_hm.push(hm_vals_i)
        } else if (radios['x'] == ax0 && radios['y'] == ax1 && vs[ax2] == sliders['ax2']) {
             dat_hm.push(hm_vals_i)
        }
    }
  }
  return dat_hm
}

function plot_time_evo(d) {
  return Plot.plot({
    x: {type:"log"},
    marginLeft: 50,
    color: {scheme: "reds", type: "ordinal", legend: true},
    marks: [
      Plot.line(
        d, {
          x: 'timestep', y: "value", stroke: "L"
          }),
      Plot.dot(
        d, {
          x: 'timestep', y: "value", stroke: "L"
          })
    ]
  })
}

function phase_diagram(d, x, y) {
  return PlotDev.plot({
    width: 400,
    color: {
      range: [0, 1],
      legend: true,
      scheme: "YlGnBu"
    },
    x: { label: x },
    y: { label: y },
    facet: { data: d, y: "L", x: 'fx' },
    marks: [
      PlotDev.raster(d, {
        x: "param1",
        y: "param2",
        fill: "value",
        interpolate: "nearest"
      }),
    ]
  })
}
```

:::

:::

::: {.callout-note collapse="true"}
## Model 1 Sketch

![](sourcesink_sketch.jpg)
:::
:::

```{ojs}
PlotDev = await import("https://esm.sh/@observablehq/plot");
```
