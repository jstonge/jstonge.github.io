---
title: "Source-sink behavioural dynamics limit institutional evolution in a group structured society"
description: This model describes behaviors that require institutional strength to get off the ground. But as you add institutional levels to your collective, there is a cost. The model finds organizational free-riding, with some organizations preferring others to pay the cost of institutional strength while benefiting the behaviors emerging from those.
format:
  html:
    echo: false
editor: visual
categories:
  - Approximate Master Equations
  - Institutions
image: unions.jpg
---

## The general idea

::: {.callout-note collapse="true"}
## Model Sketch

![](sourcesink_sketch.jpg)
:::

The key ingredients of the model are our groups $G$ with the number of adopters $i$ and with an institution of level $\ell$. We assume that with higher levels of institutional strength, $\ell$, the institution will more effectively promote group-beneficial behavior, $\ell$$\beta$. As it gets better, each adopter in the group also gain a collective benefit [$b$]{style="color: seagreen;"}. But all of these toodily-doo perks are offset by an institutional implementation costs, [$c$]{style="color: darkred;"}, of entertaining larger groups. For instance, think of the process of unionization, promoting behaviors that are costly at individual level. When unionization becomes more successful, the unions can become ungaingly. Lastly adopters lose their behavioural trait at a rate [$\gamma$]{style="color: red;"}.

First master equation[^1]:

[^1]: A sidenote on master equations for non-physicists. The citation for master equations in the original paper is the following:

    > Hébert-Dufresne, L., Noël, P.-A., Marceau, V., Allard, A., & Dubé, L. J. (2010). Propagation dynamics on networks featuring complex topologies. Physical Review E, 82(3), 036115. https://doi.org/10.1103/PhysRevE.82.036115

    The term ''master equation'' is not mentionned once in the paper. But they do talk about "*a mean-field description used to coherently couple the dynamics of the network elements (nodes, vertices, individuals...) and their recurrent topological patterns (subgraphs, groups...)*" that yields a set of ODEs for the time evolution of the system. Another paper writen by Guillaume St-Onge et al. is a more generous in their description of master equation:

    > St-Onge, G., Thibeault, V., Allard, A., Dubé, L. J., & Hébert-Dufresne, L. (2021). Master equation analysis of mesoscopic localization in contagion dynamics on higher-order networks. Physical Review E, 103(3), 032301. https://doi.org/10.1103/PhysRevE.103.032301

    In it, section II does a great job of describing what master equations are and why they are powerful modeling tools. Relevant to this model, we learn that the size of a group is determined by drawing from a group size distribution. This is what we do in our intialization scheme above. We also learn that these 3 following papers are relevant to understand master equations:

    > Lindquist, J., Ma, J., van den Driessche, P., & Willeboordse, F. H. (2011). Effective degree network disease models. Journal of Mathematical Biology, 62(2), 143--164. https://doi.org/10.1007/s00285-010-0331-2 <br><br> Gleeson, J. P. (2011). High-Accuracy Approximation of Binary-State Dynamics on Networks. Physical Review Letters, 107(6), 068701. https://doi.org/10.1103/PhysRevLett.107.068701 <br><br> Marceau, V., Noël, P.-A., Hébert-Dufresne, L., Allard, A., & Dubé, L. J. (2010). Adaptive networks: Coevolution of disease and topology. Physical Review E, 82(3), 036116. https://doi.org/10.1103/PhysRevE.82.036116

```{=tex}
\begin{align*}
\frac{d}{dt}G_{i,\ell}^{diff} &= \ell \mathbin{\color{darkgreen}{\beta}} [(i-1) + R](n - i + 1)G_{i-1,\ell} \\
                              &- \ell\mathbin{\color{darkgreen}{\beta}} (i+R)(n-i) G_{i,\ell} \\
                              &+ \mathbin{\color{red}{\gamma}}(i+1)G_{i+1,\ell} - \mathbin{\color{red}{\gamma}} i G_{i,\ell}
\end{align*}
```
where $R = \mathbin{\color{blue}{\rho}} \sum_{i',\ell'} i'G_{i',\ell'}$ represents the global diffusion of behaviors and primes denote variable over which we sum to calculate global quantity. The sum over adopters at each level weighted by global behavioural diffusion [$\rho$]{style="color: blue;"}.

Second master equation:

```{=tex}
\begin{align*}
\frac{d}{dt}G_{i,\ell}^{select} &= \mathbin{\color{blue}{\rho}} [G_{i,\ell-1}(Z_\ell Z_{\ell-1}^{-1} + \mathbin{\color{midnightblue}{\mu}}) + G_{i,\ell+1}(Z\ell Z_{\ell + 1}^{-1} + \mathbin{\color{midnightblue}{\mu}})] \\
                                &-\mathbin{\color{blue}{\rho}}(Z_{\ell-1}Z_\ell^{-1} + Z_{\ell+1}^{-1} + 2\mathbin{\color{midnightblue}{\mu}})G_{i,\ell}
\end{align*}
```
where $Z_\ell = \frac{\sum_{i'} exp(\mathbin{\color{seagreen}{b}}i'- \mathbin{\color{darkred}{c}}\ell)G_{i',\ell}}{\sum_{i'}G_{i',\ell}}$. Note that we add a constant rate of transition [$\mu$]{style="color: midnightblue;"} to the selection proces.

Taken togetherm we have the set of master equations:

$$
\frac{d}{dt}G_{i,\ell} = \frac{d}{dt}G_{i,\ell}^{diff} + \frac{d}{dt}G_{i,\ell}^{select}
$$


::: panel-tabset

## Model 1

::: {.callout-tip collapse="true"}
## Initialization scheme

``` julia
function initialize_u0(;n::Int=20, L::Int=6, M::Int=20, p::Float64=0.01)
  G = zeros(L, n+1)

  for _ in 1:M
    ℓ = rand(1:L) # pick a level
    i = sum(collect(rand(Binomial(1, p), n))[1]) # how many total adopters?
    G[ℓ, i+1] += 1 # everytime combination G[ℓ,i], count +1
  end

  G = G ./ M # normalized by tot number of groups

  # ArrayPartition are nice because we can access the level such as G.x[ℓ][i]
  return ArrayPartition(Tuple([G[ℓ,:] for ℓ=1:L]))
end

n, M = 20, 1000
u₀ = initialize_u0(n=n, L=6, M=M, p=0.01)
p = [β, γ, ρ, b, c, μ]
tspan = (1.0, 4000)
prob = ODEProblem(source_sink!, u₀, tspan, p)
sol = solve(prob, DP5(), saveat = 1., reltol=1e-8, abstol=1e-8)
```
:::

``` julia
function source_sink!(du, u, p, t)
    G, L, n = u, length(u.x), length(first(u.x))
    β, γ, ρ, b, c, μ = p
    Z, pop, R = zeros(L), zeros(L), 0.

    # Calculate mean-field coupling and observed fitness landscape
    for ℓ in 1:L
      n_adopt = collect(0:(n-1))
      Z[ℓ]    = sum(exp.(b*n_adopt .- c*(ℓ-1)) .* G.x[ℓ])
      pop[ℓ]  = sum(G.x[ℓ])
      R       += sum(ρ*n_adopt .* G.x[ℓ])
      pop[ℓ] > 0.0 && ( Z[ℓ] /= pop[ℓ] )
    end

    for ℓ = 1:L, i = 1:n
      n_adopt, gr_size = i-1, n-1

      # Diffusion events
      du.x[ℓ][i] = -γ*n_adopt*G.x[ℓ][i] - (ℓ-1)*β*(n_adopt+R)*(gr_size-n_adopt)*G.x[ℓ][i]

      n_adopt > 0 && ( du.x[ℓ][i] += β*(ℓ-1)*(n_adopt-1+R)*(gr_size-n_adopt+1)*G.x[ℓ][i-1])
      n_adopt < gr_size && ( du.x[ℓ][i] +=  γ*(n_adopt+1)*G.x[ℓ][i+1] )

      # Group selection process
      ℓ > 1 && ( du.x[ℓ][i] += ρ*G.x[ℓ-1][i]*(Z[ℓ] / Z[ℓ-1] + μ) - ρ*G.x[ℓ][i]*(Z[ℓ-1] / Z[ℓ]+μ) )
      ℓ < L && ( du.x[ℓ][i] += ρ*G.x[ℓ+1][i]*(Z[ℓ] / Z[ℓ+1] + μ) - ρ*G.x[ℓ][i]*(Z[ℓ+1] / Z[ℓ]+μ) )
    end
end
```
:::

```{ojs load results db}
resdb = FileAttachment("source-sink-res.db").sqlite()
```

```{ojs helpers}
f = (x) => Number.isInteger(x) ? x.toPrecision(2) : x
minmax = (p, i) => d3.extent(p.map(d => parseFloat(d[i])))
s = (p,i) => { 
  const unique_vals = Array.from(new Set(p.map(d => parseFloat(d[i]))))
                           .sort((a,b) => a - b)
  const out = []
  for (let i=1; i < unique_vals.length; i++ ) {
    out.push(+(unique_vals[i]-unique_vals[i-1]).toPrecision(1))
  } // return whatev if length is zero
  return out.length === 0 ? 0.1 : out[0]
}
```

::: panel-tabset

## Plot 2


```{ojs}
//| panel: sidebar
unique_name = resdb.query(`SELECT DISTINCT name FROM sourcesink2`)
p = unique_name.map(d => d.name.split("_"))

viewof beta  = Inputs.range(minmax(p,0), {step: s(p,0),  label: "β", value:p[0][0]})
viewof alpha = Inputs.range(minmax(p,1), {step: s(p,1),  label: "α", value:p[0][1]})
viewof gamma = Inputs.range(minmax(p,2), {step: s(p,2),  label: "γ", value:p[0][2]})
viewof rho   = Inputs.range(minmax(p,3), {step: s(p,3),  label: "ρ", value:p[0][3]})
viewof b     = Inputs.range(minmax(p,4), {step: s(p,4),  label: "b", value:p[0][4]})
viewof c     = Inputs.range(minmax(p,5), {step: s(p,5),  label: "c", value:p[0][5]})
viewof mu    = Inputs.range(minmax(p,6), {step: s(p,6),  label: "μ", value:p[0][6]})

// use sql query to filter
data2 = resdb.query(`
  SELECT * 
  FROM sourcesink2
  WHERE
  name = '${f(beta)}_${f(alpha)}_${f(gamma)}_${f(rho)}_${f(b)}_${f(c)}_${f(mu)}'
`)

```

```{ojs}
//| panel: fill
Plot.plot({
  x: {type:"log"},
  // y: {domain: [0,1]},
  color: {scheme: "reds", type: "ordinal", legend: true},
  marks: [
    Plot.line(
      data2, {
        x: 'timestep', y: "value", stroke: "L"
        }),
    Plot.dot(
      data2, {
        x: 'timestep', y: "value", stroke: "L"
        })
  ]
})
```

## Takeaways:

-   Frequency of behaviour in groups with different institutional strength.
-   Within groups, the frequency of cooperative behaviour follows the strength of institutions (with ℓ = 1 in light beige and ℓ = 6 in dark red).
-   Qualitatively, no institutions are possible if institutional costs are too high, and the behaviour never spreads.
-   The time dynamics of global behavioural frequency and behaviour in groups can include patterns of surge and collapse.

:::

