[
  {
    "objectID": "posts/source-sink/index.html",
    "href": "posts/source-sink/index.html",
    "title": "Source-sink behavioural dynamics limit institutional evolution in a group structured society",
    "section": "",
    "text": "resdb = DuckDBClient.of({\n  sourcesink1: FileAttachment(\"sourcesink1.parquet\"),\n  sourcesink2: FileAttachment(\"sourcesink2.parquet\"),\n  sourcesink3: FileAttachment(\"sourcesink3.parquet\")\n})\n\n\n\n\n\n\n\nf = (x) => Number.isInteger(x) ? x.toPrecision(2) : x\n\n// model: resdb output for a specific model\n// lookup: { [0: param1, 1: param2, ...] }\nfunction get_param_table(model, lookup) {\n  \n  // Extract the step from a list of values for a parameter\n  const s = (p,i) => { \n    const unique_vals = Array.from(new Set(p.map(d => parseFloat(d[i]))))\n                            .sort((a,b) => a - b)\n    const out = []\n    for (let i=1; i < unique_vals.length; i++ ) {\n      out.push(+(unique_vals[i]-unique_vals[i-1]).toPrecision(2))\n    } // return whatev if length is zero\n    return out.length === 0 ? 0.1 : out[0]\n  }\n\n  const minmax = (p, i) => d3.extent(p.map(d => parseFloat(d[i])))\n  \n  const p = model.map(d => d.name.split(\"_\"))\n  \n  const param_table = {}\n  const first_line_param = p[0]\n  for ( let i=0; i < first_line_param.length; i++ ) {\n    param_table[lookup['idx2name'][i]] = { 's': s(p,i), 'first_val': first_line_param[i], 'minmax': minmax(p,i) }\n  }\n  return param_table\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource-sink modelContagion modelGame-theoretic model\n\n\n\nDescription\nThe key ingredients of the source-sink model1 are groups \\(G\\) of various size with a certain number of adopters \\(i\\) and of institution of level \\(\\ell\\). We assume that with higher levels of institutional strength, \\(\\ell\\), the institution will more effectively promote group-beneficial behavior, \\(\\ell\\)\\(\\beta\\). As it gets better, each adopter in the group also gain a collective benefit \\(b\\). But all of these toodily-doo perks are offset by an institutional implementation costs, \\(c\\), of entertaining larger groups. For instance, think of the process of unionization, promoting behaviors that are costly at individual level. When unionization becomes more successful, the unions can become ungaingly. Lastly adopters lose their behavioural trait at a rate \\(\\gamma\\).\nFirst master equation2:\n\\[\\begin{align*}\n\\frac{d}{dt}G_{i,\\ell}^{diff} &= \\ell \\mathbin{\\color{darkgreen}{\\beta}} [(i-1) + R](n - i + 1)G_{i-1,\\ell} \\\\\n                              &- \\ell\\mathbin{\\color{darkgreen}{\\beta}} (i+R)(n-i) G_{i,\\ell} \\\\\n                              &+ \\mathbin{\\color{red}{\\gamma}}(i+1)G_{i+1,\\ell} - \\mathbin{\\color{red}{\\gamma}} i G_{i,\\ell}\n\\end{align*}\\]\nwhere \\(R = \\mathbin{\\color{blue}{\\rho}} \\sum_{i',\\ell'} i'G_{i',\\ell'}\\) represents the global diffusion of behaviors and primes denote variable over which we sum to calculate global quantity. The sum over adopters at each level weighted by global behavioural diffusion \\(\\rho\\).\nSecond master equation:\n\\[\\begin{align*}\n\\frac{d}{dt}G_{i,\\ell}^{select} &= \\mathbin{\\color{blue}{\\rho}} [G_{i,\\ell-1}(Z_\\ell Z_{\\ell-1}^{-1} + \\mathbin{\\color{midnightblue}{\\mu}}) + G_{i,\\ell+1}(Z\\ell Z_{\\ell + 1}^{-1} + \\mathbin{\\color{midnightblue}{\\mu}})] \\\\\n                                &-\\mathbin{\\color{blue}{\\rho}}(Z_{\\ell-1}Z_\\ell^{-1} + Z_{\\ell+1}^{-1} + 2\\mathbin{\\color{midnightblue}{\\mu}})G_{i,\\ell}\n\\end{align*}\\]\nwhere \\(Z_\\ell = \\frac{\\sum_{i'} exp(\\mathbin{\\color{seagreen}{b}}i'- \\mathbin{\\color{darkred}{c}}\\ell)G_{i',\\ell}}{\\sum_{i'}G_{i',\\ell}}\\). Note that we add a constant rate of transition \\(\\mu\\) to the selection proces.\nTaken together we have the set of master equations:\n\\[\n\\frac{d}{dt}G_{i,\\ell} = \\frac{d}{dt}G_{i,\\ell}^{diff} + \\frac{d}{dt}G_{i,\\ell}^{select}\n\\]\n\n\nJulia model\nfunction source_sink!(du, u, p, t)\n    G, L, n = u, length(u.x), length(first(u.x))\n    β, γ, ρ, b, c, μ = p\n    Z, pop, R = zeros(L), zeros(L), 0.\n\n    # Calculate mean-field coupling and observed fitness landscape\n    for ℓ in 1:L\n      n_adopt = collect(0:(n-1))\n      Z[ℓ]    = sum(exp.(b*n_adopt .- c*(ℓ-1)) .* G.x[ℓ])\n      pop[ℓ]  = sum(G.x[ℓ])\n      R       += sum(ρ*n_adopt .* G.x[ℓ])\n      pop[ℓ] > 0.0 && ( Z[ℓ] /= pop[ℓ] )\n    end\n\n    for ℓ = 1:L, i = 1:n\n      n_adopt, gr_size = i-1, n-1\n\n      # Diffusion events\n      du.x[ℓ][i] = -γ*n_adopt*G.x[ℓ][i] - (ℓ-1)*β*(n_adopt+R)*(gr_size-n_adopt)*G.x[ℓ][i]\n\n      n_adopt > 0 && ( du.x[ℓ][i] += β*(ℓ-1)*(n_adopt-1+R)*(gr_size-n_adopt+1)*G.x[ℓ][i-1])\n      n_adopt < gr_size && ( du.x[ℓ][i] +=  γ*(n_adopt+1)*G.x[ℓ][i+1] )\n\n      # Group selection process\n      ℓ > 1 && ( du.x[ℓ][i] += ρ*G.x[ℓ-1][i]*(Z[ℓ] / Z[ℓ-1] + μ) - ρ*G.x[ℓ][i]*(Z[ℓ-1] / Z[ℓ]+μ) )\n      ℓ < L && ( du.x[ℓ][i] += ρ*G.x[ℓ+1][i]*(Z[ℓ] / Z[ℓ+1] + μ) - ρ*G.x[ℓ][i]*(Z[ℓ+1] / Z[ℓ]+μ) )\n    end\nend\n\n\nAnalysis\n\n\nsourcesink1 = resdb.query(`SELECT DISTINCT name FROM sourcesink1`)\nlookup1 = {\n  const out = {}\n  out['idx2name'] = {0: \"β\", 1: 'γ', 2: 'ρ', 3: 'b', 4: 'c', 5: 'μ'}\n  out['name2idx'] = {\"β\": 0, 'γ': 1, 'ρ': 2, 'b': 3, 'c': 4, 'μ': 5}\n  return out\n}\n\np1 = get_param_table(sourcesink1, lookup1)\n\nviewof s1 = Inputs.form({\n  β: Inputs.range(p1['β']['minmax'], {step: p1['β']['s'], label: \"β\", width: 500}),\n  γ: Inputs.range(p1['γ']['minmax'], {step: p1['γ']['s'], label: \"γ\", width: 500}),\n  ρ: Inputs.range(p1['ρ']['minmax'], {step: p1['ρ']['s'], label: \"ρ\", width: 500}),\n  b: Inputs.range(p1['b']['minmax'], {step: p1['b']['s'], label: \"b\", width: 500}),\n  c: Inputs.range(p1['c']['minmax'], {step: p1['c']['s'], label: \"c\", width: 500}),\n  μ: Inputs.range(p1['μ']['minmax'], {step: p1['μ']['s'], label: \"μ\", width: 500})\n})\n\ndata = resdb.query(`\n  SELECT timestep::INT as timestep, L::INT as L, value, name\n  FROM sourcesink1\n  WHERE\n  name = '${f(s1['β'])}_${f(s1['γ'])}_${f(s1['ρ'])}_${f(s1['b'])}_${f(s1['c'])}_${f(s1['μ'])}'\n`)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplot_time_evo(data)\n\n\n\n\n\n\n\n\n\n\n\nTakeaways:\n\nFrequency of behaviour in groups with different institutional strength.\nWithin groups, the frequency of cooperative behaviour follows the strength of institutions (with ℓ = 1 in light beige and ℓ = 6 in dark red).\nQualitatively, no institutions are possible if institutional costs are too high, and the behaviour never spreads.\nThe time dynamics of global behavioural frequency and behaviour in groups can include patterns of surge and collapse.\n\n\n\n\n\nDescription\nThe key difference in that model from the last is that contagion is something to be limited by institutions of various levels. As such, \\(\\beta\\) in our model now must be negative while \\(\\alpha\\) must be positive for transmission to fall with \\(\\ell\\).\nWe ask ourselves to what extent the contagion is able to spread with very little \\(\\beta\\) values.\nWe want institutions to be able to stop contagions but contagion must exist in the first place.\n\\[\\begin{align*}\n\\frac{d}{dt}G_{i,\\ell}^{\\text{epi}} &= \\beta {\\color{red}{\\ell}}^{\\color{red}{-\\alpha}} [(i-1) + R](n - i + 1)G_{i-1,\\ell} \\\\\n                              &- \\beta {\\color{red}{\\ell}}^{\\color{red}{-\\alpha}} (i+R)(n-i) G_{i,\\ell} \\\\\n                              &+ \\gamma(i+1)G_{i+1,\\ell} - \\mathbin{\\gamma} i G_{i,\\ell}\n\\end{align*}\\]\nwhere \\(R = \\mathbin{\\rho} \\sum_{i',\\ell'} i'G_{i',\\ell'}\\) represents the global diffusion of behaviors and primes denote variable over which we sum to calculate global quantity. The sum over adopters at each level weighted by global behavioural diffusion \\(\\rho\\).\nfunction source_sink2!(du, u, p, t)\n    G, L, n = u, length(u.x), length(first(u.x))\n    β, α, γ, ρ, b, c, μ = p\n    Z, pop, R = zeros(L), zeros(L), 0.\n\n    # Calculate mean-field coupling and observed fitness landscape\n    for ℓ in 1:L\n        n_adopt = collect(0:(n-1))\n        Z[ℓ]    = sum(exp.(b*n_adopt .- c*(ℓ-1)) .* G.x[ℓ]) \n        pop[ℓ]  = sum(G.x[ℓ])\n        R      += sum(ρ * n_adopt .* G.x[ℓ]) \n        pop[ℓ] > 0.0 && ( Z[ℓ] /= pop[ℓ] ) \n      end\n      \n      for ℓ = 1:L, i = 1:n\n        n_adopt, gr_size = i-1, n-1\n        # Diffusion events\n        du.x[ℓ][i] = -γ*n_adopt*G.x[ℓ][i] - β*(ℓ^-α)*(n_adopt+R)*(gr_size-n_adopt)*G.x[ℓ][i]\n        n_adopt > 0 && ( du.x[ℓ][i] += β*(ℓ^-α)*(n_adopt-1+R)*(gr_size-n_adopt+1)*G.x[ℓ][i-1])\n        n_adopt < gr_size && ( du.x[ℓ][i] +=  γ*(n_adopt+1)*G.x[ℓ][i+1] )\n        # Group selection process\n        ℓ > 1 && ( du.x[ℓ][i] += ρ*G.x[ℓ-1][i]*(Z[ℓ] / Z[ℓ-1] + μ) - ρ*G.x[ℓ][i]*(Z[ℓ-1] / Z[ℓ]+μ) )\n        ℓ < L && ( du.x[ℓ][i] += ρ*G.x[ℓ+1][i]*(Z[ℓ] / Z[ℓ+1] + μ) - ρ*G.x[ℓ][i]*(Z[ℓ+1] / Z[ℓ]+μ) )\n      end\nend\n\n\nPlot\n\nTime evo plotPhase diagram\n\n\n\n\nsourcesink2 = resdb.query(`SELECT DISTINCT name FROM sourcesink2`)\nlookup2 = {\n  const out = {}\n  out['idx2name'] = {0: 'β', 1: 'ξ', 2: 'α', 3: 'γ', 4: 'ρ', 5: 'η', 6: 'b', 7: 'c', 8:'μ'}\n  out['name2idx'] = {'β': 0, 'ξ': 1, 'α': 2, 'γ': 3, 'ρ': 4, 'η': 5, 'b': 6, 'c': 7, 'μ': 8}\n  return out\n}\n\np2 = get_param_table(sourcesink2, lookup2)\n\nviewof s2 = Inputs.form({\n  β: Inputs.range(p2['β']['minmax'], {step: p2['β']['s'], label: \"β\", value: p2['β']['first_val']}),\n  ξ: Inputs.range(p2['ξ']['minmax'], {step: p2['ξ']['s'], label: \"ξ\", value: p2['ξ']['first_val']}),\n  α: Inputs.range(p2['α']['minmax'], {step: p2['α']['s'], label: \"α\", value: p2['α']['first_val']}),\n  γ: Inputs.range(p2['γ']['minmax'], {step: p2['γ']['s'], label: \"γ\", value: p2['γ']['first_val']}),\n  ρ: Inputs.range(p2['ρ']['minmax'], {step: p2['ρ']['s'], label: \"ρ\", value: p2['ρ']['first_val']}),\n  η: Inputs.range(p2['η']['minmax'], {step: p2['η']['s'], label: \"η\", value: p2['η']['first_val']}),\n  b: Inputs.range(p2['b']['minmax'], {step: p2['b']['s'], label: \"b\", value: p2['b']['first_val']}),\n  c: Inputs.range(p2['c']['minmax'], {step: p2['c']['s'], label: \"c\", value: p2['c']['first_val']}),\n  μ: Inputs.range(p2['μ']['minmax'], {step: p2['μ']['s'], label: \"μ\", value: p2['μ']['first_val']})\n})\n\ndata2 = resdb.query(`\n  SELECT timestep::INT as timestep, L::INT as L, value, name\n  FROM sourcesink2\n  WHERE\n  name = '${f(s2['β'])}_${f(s2['ξ'])}_${f(s2['α'])}_${f(s2['γ'])}_${f(s2['ρ'])}_${f(s2['η'])}_${f(s2['b'])}_${f(s2['c'])}_${f(s2['μ'])}'\n`)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplot_time_evo(data2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof r2 = Inputs.form({\n  x: Inputs.radio([\"β\", \"α\", 'b'], {label: \"x\", value: 'β'}),\n  y: Inputs.radio([\"β\", \"α\", 'b'], {label: \"y\", value: 'α'})\n})\n\nviewof s2b = Inputs.form({\n  β: Inputs.range(p2['β']['minmax'], {step: p2['β']['s'], label: \"β\", disabled: r3['x'] == \"β\" || r3['y'] == \"β\"}),\n  α: Inputs.range(p2['α']['minmax'], {step: p2['α']['s'], label: \"α\", disabled: r3['x'] == \"α\" || r3['y'] == \"α\"}),\n  b: Inputs.range(p2['b']['minmax'], {step: p2['b']['s'], label: \"b\", disabled: r3['x'] == \"b\" || r3['y'] == \"b\"}),\n  ρ: Inputs.range(p2['ρ']['minmax'], {label: \"ρ\", disabled: true, value: p2['ρ']['first_val']}),\n  ξ: Inputs.range(p2['ξ']['minmax'], {label: \"ξ\", disabled: true, value: p2['ξ']['first_val']}),\n  γ: Inputs.range(p2['γ']['minmax'], {label: \"γ\", disabled: true, value: p2['γ']['first_val']}),\n  c: Inputs.range(p2['c']['minmax'], {label: \"c\", disabled: true, value: p2['c']['first_val']}),\n  μ: Inputs.range(p2['μ']['minmax'], {label: \"μ\", disabled: true, value: p2['μ']['first_val']})\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata2b = resdb.query(`\n    WITH tmp as (\n        SELECT name, L, MAX(timestep::INT) as timestep\n        FROM sourcesink2\n        GROUP BY name, L\n    )\n    SELECT s.name, s.value, s.L::INT as L, s.value_prop\n    FROM sourcesink2 s\n    JOIN tmp\n    ON s.name = tmp.name AND s.L = tmp.L AND s.timestep = tmp.timestep \n`)\n\ndata_hm2 = {\n  const out = [];\n\n  for (let i=0; i < data2b.length; i++) { \n    const p_split = data2b[i].name.split('_')\n       \n    const β_val = parseFloat(p_split[lookup2['name2idx']['β']])\n    const α_val = parseFloat(p_split[lookup2['name2idx']['α']])\n    const ρ_val = parseFloat(p_split[lookup2['name2idx']['ρ']])\n    const b_val = parseFloat(p_split[lookup2['name2idx']['b']])\n    const ξ_val = parseFloat(p_split[lookup2['name2idx']['ξ']])\n    const γ_val = parseFloat(p_split[lookup2['name2idx']['γ']])\n    const c_val = parseFloat(p_split[lookup2['name2idx']['c']])\n    const μ_val = parseFloat(p_split[lookup2['name2idx']['μ']])\n\n    const hm_vals = {\n      'L': data2b[i].L,\n      'delta' : null, \n      'param1': parseFloat(p_split[lookup2['name2idx'][r2['x']]]),\n      'param2': parseFloat(p_split[lookup2['name2idx'][r2['y']]]),\n      'value': data2b[i].value_prop\n    }\n\n    // The values in the second half of the sliders\n    if (ξ_val === s2b['ξ'] && γ_val === s2b['γ'] && c_val === s2b['c'] && μ_val == s2b['μ'] && ρ_val == s2b['ρ'] ) {\n\n        // Depending on our choice of x and y, we want the 'other' value\n        if (r2['x'] == \"β\" && r2['y'] == 'α' && b_val == s2b['b']) {\n             out.push(hm_vals)\n        } else if (r2['x'] == \"β\" && r2['y'] == \"b\" && α_val == s2b['α']) {\n             out.push(hm_vals)\n        } else if (r2['x'] == 'α' && r2['y'] == \"b\" && β_val == s2b['β']) {\n             out.push(hm_vals)\n        }\n    }\n  }\n  return out\n}\n\n\nPlotDev.plot({\n  width: 400,\n  color: {\n    range: [0, 1],\n    legend: true,\n    scheme: \"YlGnBu\"\n  },\n  x: { label: r2['x'] },\n  y: { label: r2['y'] },\n  facet: { data: data_hm2, y: \"L\" },\n  marks: [\n    PlotDev.raster(data_hm2, {\n      x: \"param1\",\n      y: \"param2\",\n      fill: \"value\",\n      interpolate: \"nearest\"\n    }),\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\nThe key difference in that model from the last is that contagion is something to be limited by institutions of various levels. As such, \\(\\beta\\) in our model now must be negative while \\(\\alpha\\) must be positive for transmission to fall with \\(\\ell\\).\nWe ask ourselves to what extent the contagion is able to spread with very little \\(\\beta\\) values.\nWe want institutions to be able to stop contagions but contagion must exist in the first place.\nfunction source_sink3!(du, u, p, t)\n  G, L, n = u, length(u.x), length(u.x[1])\n  β, γ, ρ, b, c, μ = p\n  Z, pop, R = zeros(L), zeros(L), 0.\n\n  # Calculate mean-field coupling and observed fitness landscape\n  # In the following, the functions g (cost-benefits for groups) and g̃ (fitness function) are taken equal to function f. The three have similar properties.\n    for ℓ in 1:L\n      n_adopt = collect(0:(n-1))\n      Z[ℓ]    = sum(f.(b*n_adopt .- c*(ℓ-1)) .* G.x[ℓ])\n      pop[ℓ]  = sum(G.x[ℓ])\n      R      += sum(n_adopt .* G.x[ℓ]) # Global diffusion\n      pop[ℓ] > 0.0 && ( Z[ℓ] /= pop[ℓ] )\n  end\n\n    for ℓ = 1:L, i = 1:n\n      n_adopt, gr_size = i-1, n-1\n      # Inndividual selection process\n      du.x[ℓ][i] = -n_adopt*f(1-h(ℓ))*G.x[ℓ][i] - (gr_size-n_adopt)*f(h(ℓ)-1)*G.x[ℓ][i]\n      du.x[ℓ][i] += -n_adopt*(gr_size-n_adopt)*(β+γ)*G.x[ℓ][i] - ρ*(gr_size-n_adopt)*β*R*G.x[ℓ][i] - ρ*n_adopt*γ*(gr_size-R)*G.x[ℓ][i]\n      n_adopt > 0 && ( du.x[ℓ][i] += (gr_size-n_adopt+1)*f(h(ℓ)-1)*G.x[ℓ][i-1] + β*(n_adopt-1+ρ*R)*(gr_size-n_adopt+1)*G.x[ℓ][i-1] )\n      n_adopt < gr_size && ( du.x[ℓ][i] += (n_adopt+1)*f(1-h(ℓ))*G.x[ℓ][i+1] + γ*(gr_size-n_adopt-1+ρ*(gr_size-R))*(n_adopt+1)*G.x[ℓ][i+1] )\n      # Group selection process\n      ℓ > 1 && ( du.x[ℓ][i] += f(b*n_adopt-c*(ℓ-1))*(μ+ρ*Z[ℓ]/Z[ℓ-1])*G.x[ℓ-1][i] - (μ*f(c*(ℓ-1)-b*n_adopt)+ρ*f(b*n_adopt-c*(ℓ-2))*Z[ℓ-1]/Z[ℓ])*G.x[ℓ][i] )\n      ℓ < L && ( du.x[ℓ][i] += (μ*f(c*ℓ-b*n_adopt)+ρ*f(b*n_adopt-c*(ℓ-1))*Z[ℓ]/Z[ℓ+1])*G.x[ℓ+1][i] - f(b*n_adopt-c*ℓ)*(μ+ρ*Z[ℓ+1]/Z[ℓ])*G.x[ℓ][i] )\n    end\nend\n\nTime evo plotPhase diagram\n\n\n\n\nsourcesink3 = resdb.query(`SELECT DISTINCT name FROM sourcesink3`)\nlookup3 = {\n  const out = {}\n  out['idx2name'] = {0: \"β\", 1: 'γ', 2: 'ρ', 3: 'b', 4: 'c', 5: 'μ', 6: 'δ'}\n  out['name2idx'] = {\"β\": 0, 'γ':1, 'ρ': 2, 'b': 3, 'c': 4, 'μ': 5, 'δ': 6}\n  return out\n}\n\np3 = get_param_table(sourcesink3, lookup3)\n\nviewof s3 = Inputs.form({\n  β: Inputs.range(p3['β']['minmax'], {step: p3['β']['s'], label: \"β\"}),\n  γ: Inputs.range(p3['γ']['minmax'], {step: p3['γ']['s'], label: \"γ\"}),\n  ρ: Inputs.range(p3['ρ']['minmax'], {step: p3['ρ']['s'], label: \"ρ\"}),\n  b: Inputs.range(p3['b']['minmax'], {step: p3['b']['s'], label: \"b\"}),\n  c: Inputs.range(p3['c']['minmax'], {step: p3['c']['s'], label: \"c\"}),\n  μ: Inputs.range(p3['μ']['minmax'], {step: p3['μ']['s'], label: \"μ\"}),\n  δ: Inputs.range(p3['δ']['minmax'], {step: p3['δ']['s'], label: \"δ\"})\n})\n\ndata3a = resdb.query(`\n  SELECT timestep::INT as timestep, L::INT as L, value, name\n  FROM sourcesink3\n  WHERE\n  name = '${f(s3['β'])}_${f(s3['γ'])}_${f(s3['ρ'])}_${f(s3['b'])}_${f(s3['c'])}_${f(s3['μ'])}_${f(s3['δ'])}'\n`)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplot_time_evo(data3a)\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof r3 = Inputs.form({\n  x: Inputs.radio([\"β\", \"ρ\", 'b'], {label: \"x\", value: 'β'}),\n  y: Inputs.radio([\"β\", \"ρ\", 'b'], {label: \"y\", value: 'b'})\n})\n\n// In this set of sliders, beta, rho, and b are disabled when selected.\n// The other params are just disabled by default. For now.\nviewof s3b = Inputs.form({\n  β: Inputs.range(p3['β']['minmax'], {step: p3['β']['s'], label: \"β\", disabled: r3['x'] == \"β\" || r3['y'] == \"β\"}),\n  ρ: Inputs.range(p3['ρ']['minmax'], {step: p3['ρ']['s'], label: \"ρ\", disabled: r3['x'] == \"ρ\" || r3['y'] == \"ρ\"}),\n  b: Inputs.range(p3['b']['minmax'], {step: p3['b']['s'], label: \"b\", disabled: r3['x'] == \"b\" || r3['y'] == \"b\"}),\n  γ: Inputs.range(p3['γ']['minmax'], {label: \"γ\", disabled: true}),\n  c: Inputs.range(p3['c']['minmax'], {label: \"c\", disabled: true}),\n  μ: Inputs.range(p3['μ']['minmax'], {label: \"μ\", disabled: true})\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata3b = resdb.query(`\n    WITH tmp as (\n        SELECT name, L, MAX(timestep::INT) as timestep\n        FROM sourcesink3\n        GROUP BY name, L\n    )\n    SELECT s.name, s.value, s.L::INT as L, s.value_prop\n    FROM sourcesink3 s\n    JOIN tmp\n    ON s.name = tmp.name AND s.L = tmp.L AND s.timestep = tmp.timestep \n`)\n\ndata_hm3 = {\n  const out = [];\n\n  for (let i=0; i < data3b.length; i++) { \n    const p_split = data3b[i].name.split('_')\n   \n    // We only look at values specified by ranges that do not vary.\n    const beta_val = parseFloat(p_split[lookup3['name2idx']['β']])\n    const r_val    = parseFloat(p_split[lookup3['name2idx']['ρ']])\n    const b_val    = parseFloat(p_split[lookup3['name2idx']['b']])\n    const g_val    = parseFloat(p_split[lookup3['name2idx']['γ']])\n    const c_val    = parseFloat(p_split[lookup3['name2idx']['c']])\n    const m_val    = parseFloat(p_split[lookup3['name2idx']['μ']])\n\n    const hm_vals = {\n      'L': data3b[i].L,\n      'delta' : p_split[lookup3['name2idx']['δ']],\n      'param1': parseFloat(p_split[lookup3['name2idx'][r3['x']]]),\n      'param2': parseFloat(p_split[lookup3['name2idx'][r3['y']]]),\n      'value': data3b[i].value_prop\n    }\n\n    // Gamma, c, and mu are parameters we fix b/c we don't care about them.\n    if (g_val === s3b['γ'] && c_val === s3b['c'] && m_val === s3b['μ']) {\n\n        // Depending on our choice of x and y, we want the 'other' value, e.g.\n        // xaxis=beta; yaxis=b, then we get all the values for ρs\n        // So that we can see how ρs vary give all values of βs and bs.\n        if (r3['x'] == \"β\" && r3['y'] == 'b' && r_val == s3b['ρ']) {\n             out.push(hm_vals)\n        } else if (r3['x'] == \"β\" && r3['y'] == \"ρ\" && b_val == s3b['b']) {\n             out.push(hm_vals)\n        } else if (r3['x'] == 'ρ' && r3['y'] == \"b\" && beta_val == s3b['β']) {\n             out.push(hm_vals)\n        }\n    }\n  }\n  return out\n}\n\nphase_diagram(data_hm3, r3['x'], r3['y'])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction plot_time_evo(d) {\n  return Plot.plot({\n    x: {type:\"log\"},\n    marginLeft: 50,\n    color: {scheme: \"reds\", type: \"ordinal\", legend: true},\n    marks: [\n      Plot.line(\n        d, {\n          x: 'timestep', y: \"value\", stroke: \"L\"\n          }),\n      Plot.dot(\n        d, {\n          x: 'timestep', y: \"value\", stroke: \"L\"\n          })\n    ]\n  })\n}\n\nfunction phase_diagram(d, fx, fy) {\n  return PlotDev.plot({\n    width: 400,\n    color: {\n      range: [0, 1],\n      legend: true,\n      scheme: \"YlGnBu\"\n    },\n    x: { label: fx },\n    y: { label: fy },\n    facet: { data: d, y: \"L\", x: \"delta\" },\n    marks: [\n      PlotDev.raster(d, {\n        x: \"param1\",\n        y: \"param2\",\n        fill: \"value\",\n        interpolate: \"nearest\"\n      }),\n    ]\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nModel 1 Sketch\n\n\n\n\n\n\n\n\n\n\nPlotDev = await import(\"https://esm.sh/@observablehq/plot\");\n\n\n\n\n\n\n\n\n\n\nFootnotes\n\n\n@article{hebert-dufresne_source-sink_nodate, title = {Source-sink behavioural dynamics limit institutional evolution in a group-structured society}, volume = {9}, url = {https://royalsocietypublishing.org/doi/full/10.1098/rsos.211743}, doi = {10.1098/rsos.211743}, number = {3}, urldate = {2022-05-26}, journal = {Royal Society Open Science}, author = {Hébert-Dufresne, Laurent and Waring, Timothy M. and St-Onge, Guillaume and Niles, Meredith T. and Kati Corlew, Laura and Dube, Matthew P. and Miller, Stephanie J. and Gotelli, Nicholas J. and McGill, Brian J.}}, }↩︎\nA sidenote on master equations for non-physicists. The citation for master equations in the original paper is the following:\n\nHébert-Dufresne, L., Noël, P.-A., Marceau, V., Allard, A., & Dubé, L. J. (2010). Propagation dynamics on networks featuring complex topologies. Physical Review E, 82(3), 036115. https://doi.org/10.1103/PhysRevE.82.036115\n\nThe term ‘’master equation’’ is not mentionned once in the paper. But they do talk about “a mean-field description used to coherently couple the dynamics of the network elements (nodes, vertices, individuals…) and their recurrent topological patterns (subgraphs, groups…)” that yields a set of ODEs for the time evolution of the system. Another paper writen by Guillaume St-Onge et al. is a more generous in their description of master equation:\n\nSt-Onge, G., Thibeault, V., Allard, A., Dubé, L. J., & Hébert-Dufresne, L. (2021). Master equation analysis of mesoscopic localization in contagion dynamics on higher-order networks. Physical Review E, 103(3), 032301. https://doi.org/10.1103/PhysRevE.103.032301\n\nIn it, section II does a great job of describing what master equations are and why they are powerful modeling tools. Relevant to this model, we learn that the size of a group is determined by drawing from a group size distribution. This is what we do in our intialization scheme above. We also learn that these 3 following papers are relevant to understand master equations:\n\nLindquist, J., Ma, J., van den Driessche, P., & Willeboordse, F. H. (2011). Effective degree network disease models. Journal of Mathematical Biology, 62(2), 143–164. https://doi.org/10.1007/s00285-010-0331-2  Gleeson, J. P. (2011). High-Accuracy Approximation of Binary-State Dynamics on Networks. Physical Review Letters, 107(6), 068701. https://doi.org/10.1103/PhysRevLett.107.068701  Marceau, V., Noël, P.-A., Hébert-Dufresne, L., Allard, A., & Dubé, L. J. (2010). Adaptive networks: Coevolution of disease and topology. Physical Review E, 82(3), 036116. https://doi.org/10.1103/PhysRevE.82.036116\n\n↩︎"
  },
  {
    "objectID": "posts/sci-group-life-cycle/index.html",
    "href": "posts/sci-group-life-cycle/index.html",
    "title": "Scientific group life cycle",
    "section": "",
    "text": "Model Sketch\n\n\n\n\n\n\n\n\n\nThere are research groups \\(G\\) with a number of non-programmers \\(n\\) and programmers \\(p\\). In a data-driven world, we assume that learning to code confer a large benefit to programmers over non-programmer such that \\(\\alpha << \\beta\\). There is a constant rate of influx of students who do not know how to learn to code in research groups \\(\\mu\\). There is a cost of learning to code \\(c(p,n)\\), which depend on the number of programmers and non-programmers within group. We assume that programmers and non-programmers have different graduation rates, \\(\\nu_p\\) and \\(\\nu_n\\), with \\(\\nu_p > \\nu_n\\).\nWe model the group life cycle with the following master equation:\n\\[\\begin{align*}\n\\frac{d}{dt}G_{n,p} &= \\mu(G_{n-1,p} - G_{n,p}) + \\nu_n \\Big((n+1)G_{n+1,p}-nG_{n,p}\\Big) \\\\\n                           &+ \\Big[ \\tau_g(n+1,p-1)(1-c(n+1, p-1)G_{n+1,p-1} - \\tau_g(n,p)G_{n,p} \\Big] \\\\\n                   &+ \\nu_p\\Big((p+1)G_{n,p+1} - pG_{n,p} \\Big) \\\\\n                   &+ \\tau_g(n+1,p)(1-c(n+1,p))G_{n+1,p}\n\\end{align*}\\]\nLearning to code confers a collective benefits on individuals \\(\\tau_g(n,p; \\alpha, \\beta) \\propto \\frac{\\bar{Z}_{n,p}}{Z_{n,p}}\\), where\n\\[\\log(Z_{n,p}) \\sim \\alpha * n + \\beta * p\\] \\[\\log(\\bar{Z}_{n,p}) \\sim \\alpha (n-1) +\\beta (c * p + (1-c)(p+1))\\]\nWe can think of \\(\\bar{Z}_{n,p}\\) as the potential benefits over \\(Z_{n,p}\\). Reorganizing the terms, we get:\n\\[\\begin{align*}\n\\log[\\tau_g(n,p; \\alpha, \\beta))] &= \\alpha (n-1) +\\beta (c * p + (1-c)(p+1)) - \\alpha * n + \\beta * p \\\\\n                                  &= -\\alpha + \\beta(1-c)\n\\end{align*}\\]\nNote that \\(\\tau_g\\) ends up being a function of \\(n, p\\) through the cost function: \\[c(n,p) = c_0*e^{-\\frac{p}{n}}\\]\nYou can explore both functions below:\n\n\n\n\n\n\nCost function\n\n\n\n\n\n\nfunction cost_prog(n, i, c_0) { return c_0 * Math.exp(-i/n); }\nfunction cost_prog2(n, i, c_0) { return c_0 * Math.exp(-i/(n+i)); }\n\nmax_gr_size = 20\nviewof N = Inputs.range([1, max_gr_size], {value: 20, step: 1, label: \"group Size\"})\nviewof coder = Inputs.range([0, (N-1)], {value: 10, step: 1, label: \"# coder\"})\nviewof c_0 = Inputs.range([0, 1], {value: 0.95, step: 0.01, label: \"c₀\"})\nviewof nc = Inputs.range([1, N], {value: (N-coder), step: 1., label: \"# non-coder\", disabled:true})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nc(n,p) = c₀ * exp(-p/n)c(n,p) = c₀ * exp(-p/(n+p))\n\n\n\nnon_coder = N - coder\nxs = [...Array(N).keys()];\nys = xs.map(x => cost_prog(non_coder, x, c_0))\n\n\nPlot.lineY(ys).plot({\n    height: 400, width: 450, grid: true,\n    y: { label: \"↑ c(n,p)\", domain:[0,1] },\n    x: { label: \"p/n →\" }\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(p/n\\) \\(\\Rightarrow\\) /  =   \\(c(n,p)\\) =  (c=1 means that non-coders always fail to learn to code; c=0 means non-coders always succeed) Non-programmers can still learn to code when \\(p=0\\) because of \\(c_0\\) I woudl expect a bigger difference when we go from no prorammers in the team to one programmer\n\n\n\nx2s = [...Array(N).keys()];\ny2s = x2s.map(x => cost_prog2(non_coder, x, c_0))\n\nPlot.lineY(y2s).plot({\n    height: 400, width: 450, grid: true,\n    y: { label: \"↑ c(n,p)\", domain:[0,1] },\n    x: { label: \"p/n →\" }\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(p/n\\) \\(\\Rightarrow\\) /  =   \\(c(n,p)\\) =  (c=1 means that non-coders always fail to learn to code; c=0 means non-coders always succeed) Non-programmers can still learn to code when \\(p=0\\) because of \\(c_0\\) I woudl expect a bigger difference when we go from no prorammers in the team to one programmer\n\n\n\n\n\n\n\n\n\n\n\n\nGroup benefits\n\n\n\n\n\n\nfunction tau(n, i, alpha, beta) {\n    const c = cost_prog(n, i, 1)\n    return Math.exp(-alpha + beta*(1 - c))\n}\n\ntau_max_gr_size = 20\nviewof tau_alpha = Inputs.range([2, 4], {value: 1., step: 1, label: \"α\", format: x => 10**-x})\nviewof tau_beta = Inputs.range([1, 3], {value: 1., step: 1, label: \"β\", format: x => 10**-x})\nviewof tau_N = Inputs.range([0, tau_max_gr_size], {value: 20, step: 1, label: \"group Size\"})\nviewof tau_coder = Inputs.range([1, tau_max_gr_size], {value: 10, step: 1, label: \"# coder\"})\nviewof tau_nc = Inputs.range([1, max_gr_size], {value: (tau_N-tau_coder), step: 1., label: \"# non-coder\", disabled:true})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nτ(n,p) 1\n\n\n\ntau_non_coder = tau_N - tau_coder\ntau_xs = [...Array(tau_N).keys()];\ntau_ys = tau_xs.map(x => tau(tau_non_coder, x, 10**-tau_alpha, 10**-tau_beta))\n\nPlot.lineY(tau_ys).plot({\n    height: 400, width: 450, grid: true,\n    y: { label: \"↑ τ(α,β;n,p)\" },\n    x: { label: \"p/n →\" }\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(p/n\\) \\(\\Rightarrow\\) /  ="
  },
  {
    "objectID": "posts/sci-group-life-cycle/index.html#julia-model",
    "href": "posts/sci-group-life-cycle/index.html#julia-model",
    "title": "Scientific group life cycle",
    "section": "Julia model",
    "text": "Julia model\n\n\n\n\n\n\nInitialization scheme\n\n\n\n\n\nfunction initialize_u0(;N::Int=20)\n  N += 1 # add column for zeroth case\n  G = zeros(N, N)\n  \n  for i=1:N, j=1:N\n    G[i,j] = 1/(N*N)\n  end\n  return ArrayPartition(Tuple([G[n,:] for n=1:N]))\nend\n\nμ  = 0.001   # inflow new students-non coders\nνₙ = 0.01    # death rate non-coders\nνₚ = 0.05    # death rate coders\nα  = 0.01    # benefits non coders\nβ  = 0.1     # benefits coders\np  = [μ, νₙ, νₚ, α, β]\n\nn = 9\nu₀ = initialize_u0(N=n)\ntspan = (0., 1000.)\n\n\n\nc(n, i) = 0.95 * exp(-i / n) # cost function\nτ(n, i, α, β) = exp(-α + β*(1 - c(n, i))) # group benefits\n\nfunction life_cycle_research_groups!(du, u, p, t)\n\n  G, N, P = u, length(u.x), length(first(u₀.x)) # Note that there can be no coders but not non-coders\n  μ, νₙ, νₚ, α, β = p\n  for n=1:N, i=1:P\n    println(\"n:$(n), i:$(i), G.x[n][i]:$(G.x[n][i])\")\n    coder, non_coder = i-1, n-1   # we distinguish indices from actual values.\n    \n    du.x[n][i] = 0\n\n    non_coder > 0 && ( du.x[n][i] += μ*(G.x[n-1][i]) )                # 1st term\n    \n    # for everybody\n    # println(\"2: $(νₙ*non_coder*G.x[n][i])\")\n    du.x[n][i] -= νₙ*non_coder*G.x[n][i]\n    # println(\"3: $(νₚ*coder*G.x[n][i])\")\n    du.x[n][i] -= νₚ*coder*G.x[n][i]\n\n    # upper boxes don't exist \n    if i < P\n      # non_coder > 0 && println(\"4: $(τ(non_coder, coder, α, β)*G.x[n][i] )\")\n      # We don't want to pass non_coder = 0 to τ()\n      non_coder > 0 && ( du.x[n][i] -= τ(non_coder, coder, α, β)*G.x[n][i] )               # 4th term\n      # println(\"5: $(νₚ*(coder+1)*G.x[n][i+1])\")\n      du.x[n][i] += νₚ*(coder+1)*G.x[n][i+1]  # 5th term\n    end\n    \n    # the bottom boxes don't exist\n    if n < N\n      # println(\"6: $(μ*G.x[n][i])\")\n      du.x[n][i] -= μ*G.x[n][i]                                       # 1st term\n      du.x[n][i] += τ(non_coder+1, coder, α, β)*(c(non_coder+1, coder))*G.x[n+1][i]     # 6th term\n      du.x[n][i] += νₙ*(non_coder+1)*G.x[n+1][i]                                            # 2nd term\n      coder > 0 && ( du.x[n][i] += τ(non_coder+1, coder-1, α, β)*(1-c(non_coder+1, coder-1))*G.x[n+1][i-1] ) # 3rd term \n    end\n  end\nend"
  },
  {
    "objectID": "posts/sci-group-life-cycle/index.html#output",
    "href": "posts/sci-group-life-cycle/index.html#output",
    "title": "Scientific group life cycle",
    "section": "Output",
    "text": "Output\n\ndata = FileAttachment(\"data.json\").json()\np = Object.keys(data).map(d => d.split(\"_\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nminmax = (p, i) => d3.extent(p.map(d => parseFloat(d[i])))\n\nviewof N_    = Inputs.range(minmax(p,0), {step: 1, label: \"N\", value:\"4\"})\nviewof mu    = Inputs.range(minmax(p,1), {step: 0.03, label: \"μ\", value:\"0.0001\"})\nviewof nu_n  = Inputs.range(minmax(p,2), {step: 0.05, label: \"νₙ\", value:\"0.01\"})\nviewof nu_p  = Inputs.range(minmax(p,3), {step: 0.1,  label: \"νₚ\", value:\"0.05\"})\nviewof alpha = Inputs.range(minmax(p,4), {step: 0.15, label: \"α\", value:\"0.01\"})\nviewof beta  = Inputs.range(minmax(p,5), {step: 0.05, label: \"β\", value:\"0.1\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot\n\n\n\nf = (x) => x.toPrecision() ? x.toPrecision(2) : x\n\nPlot.plot({\n  x: {type:\"log\"},\n  y: {domain: [0,1]},\n  color: {scheme: \"reds\", type: \"ordinal\", legend: true},\n  marks: [\n    Plot.line(\n      data[`${N_}_${mu}_${nu_n}_${nu_p}_${alpha}_${beta}`], {\n        x: 'timesteps', y: \"value\", stroke: \"N\"\n        }),\n    Plot.dot(\n      data[`${N_}_${mu}_${nu_n}_${nu_p}_${alpha}_${beta}`], {\n        x: 'timesteps', y: \"value\", stroke: \"N\"\n        })\n  ]\n})"
  },
  {
    "objectID": "posts/sci-group-life-cycle/index.html#takeaways",
    "href": "posts/sci-group-life-cycle/index.html#takeaways",
    "title": "Scientific group life cycle",
    "section": "Takeaways:",
    "text": "Takeaways:"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]